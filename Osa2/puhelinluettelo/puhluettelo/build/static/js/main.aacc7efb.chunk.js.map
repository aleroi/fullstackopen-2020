{"version":3,"sources":["components/filter.js","components/personForm.js","components/persons.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","onFilterChange","value","onChange","PersonForm","props","onSubmit","handleAddPerson","newName","handleNameChange","newNumber","handleNumberChange","type","Number","person","onDelete","name","number","onClick","Persons","persons","toUpperCase","includes","map","key","url","object","request","then","response","data","axios","get","newObject","post","id","put","delete","Notification","message","notificationStyle","isError","style","content","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","useEffect","personService","allPersons","timer","setTimeout","clearInterval","event","target","preventDefault","length","nameExists","window","confirm","oldPerson","find","p","updatePerson","returnedPerson","handleUpdatePerson","newPerson","concat","catch","error","console","log","deletePerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aacc7efb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({filter, onFilterChange}) => {\r\n    return (\r\n      <p>\r\n        filter shown with <input value={filter} onChange={onFilterChange}/>\r\n      </p>\r\n    )\r\n  }\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = (props) => (\r\n\r\n    <form onSubmit={props.handleAddPerson}>\r\n      <div>\r\n        name: <input value={props.newName} onChange={props.handleNameChange} />\r\n      </div>\r\n      <div>\r\n        number: <input value={props.newNumber} onChange={props.handleNumberChange} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n\r\nexport default PersonForm ","import React from 'react'\r\n\r\nconst Number = ({person, onDelete}) => (\r\n    <li>\r\n      {person.name} {person.number}\r\n      <button onClick={() => onDelete(person)}>Delete person</button>\r\n      </li>\r\n  )\r\n\r\nconst Persons = ({persons, filter, onDelete}) => {\r\n    const caseinsensitiveFilter = (person) => (\r\n      person.name.toUpperCase().includes(filter.toUpperCase())\r\n    )\r\n    return (\r\n      <ul>\r\n        {persons\r\n          .filter(caseinsensitiveFilter)\r\n          .map(person => <Number key={person.name} person={person} onDelete={onDelete}/>)}\r\n      </ul>\r\n    )}\r\n\r\nexport default Persons","import axios from 'axios'\r\nconst url = '/api/persons';\r\n\r\nconst getAll = () => {\r\n  return object(axios.get(url))\r\n}\r\n\r\nconst create = newObject => {\r\n  return object(axios.post(url, newObject))\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return object(axios.put(`${url}/${id}`, newObject))\r\n}\r\n\r\nconst object = (request) => {\r\n    return request.then(response => response.data)\r\n}\r\nconst remove = (id) => {\r\n  return axios.delete(`${url}/${id}`)\r\n}\r\n\r\n\r\nexport default {getAll, create, update, remove}","import React, { useState, useEffect } from 'react'\nimport Filter from './components/filter'\nimport PersonForm from './components/personForm'\nimport Persons from './components/persons'\nimport personService from './services/persons'\n\n\nconst nameExists = (persons, name) => {\n  return persons.filter(person => person.name ===name).length > 0\n}\nconst Notification = ({ message }) => {\n\n  if (message === null) {\n    return null\n  }\n\n  const notificationStyle = {\n    \"color\": message.isError ? \"red\" : \"green\",\n    \"background\": \"lightgrey\",\n    \"fontSize\": \"20px\",\n    \"borderStyle\": \"solid\",\n    \"borderRadius\": \"5px\",\n    \"padding\": \"10px\",\n    \"marginBottom\": \"10px\"\n  }\n\n  return (\n    <div style={notificationStyle}>\n      {message.content}\n    </div>\n  )\n}\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [message, setMessage] = useState(null)\n\n  const content = message === null ? null : message.content\n  const isError = message === null ? null : message.isError\n\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(allPersons =>\n        setPersons(allPersons)\n        )\n    }, [])\n\n    useEffect(() => {\n      const clearMessage = () => setMessage(null)\n      const timer = setTimeout(clearMessage, 5000)\n  \n      return () => clearInterval(timer)\n    }, [content, isError])\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleFilterChange = (event) => setFilter(event.target.value)\n\n  const handleUpdatePerson = (name) => {\n    const oldPerson = persons.find(p => p.name === name)\n    const updatePerson = {...oldPerson, number: newNumber}\n\n    personService\n      .update(updatePerson.id, updatePerson)\n      .then(returnedPerson => {\n        setPersons(\n          persons.map(\n            person =>\n              person.id !== oldPerson.id ? person: returnedPerson\n            )\n          )\n        setMessage({content:`Updated ${updatePerson.name}.`, isError: false})\n          })\n        setNewName('')\n        setNewNumber('')\n      }\n\n  const handleCreateNewPerson = () => {\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n    personService\n      .create(newPerson)\n      .then(newPerson => {\n        setPersons(persons.concat(newPerson))\n        setMessage({content: `Created ${newPerson.name}.`, isError: false})\n      })\n      .catch(error => {\n        console.log(error.response.data);\n        setMessage({content: error.response.data.error, isError: true})\n      })\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleAddPerson = (event) => {\n    event.preventDefault()\n    if (nameExists(persons, newName)) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        handleUpdatePerson(newName)\n      }\n    } else {\n      handleCreateNewPerson()\n    }\n  }\n\n  const handleDelete = deletePerson => {\n    if(window.confirm(`Delete ${deletePerson.name}?`)) {\n      personService\n      .remove(deletePerson.id)\n      .then(() => {\n        setPersons(persons.filter(person => person.id !== deletePerson.id))\n        setMessage({content:`Deleted ${deletePerson.name}.`, isError: false})\n          })\n          .catch(error =>  {\n            setMessage({content: `Information of ${deletePerson.name} has already removed from server`, isError: true})\n          })\n        setNewName('')\n        setNewNumber('')\n      }\n    }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message}/>\n      <Filter filter={filter} onFilterChange={handleFilterChange}/>\n      <h2>add a new</h2>\n      <PersonForm\n        handleAddPerson={handleAddPerson}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} onDelete={handleDelete}/>\n    </div>\n  )\n  }\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}